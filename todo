#! /usr/bin/env node

const chalk = require('chalk');
const readline = require('readline');
const low = require("lowdb");
const FileSync = require('lowdb/adapters/FileSync');

const args = process.argv;

const usage = () => {
  const usageText = `
    todo helps you manage your todo task.

    usage:
      todo <command>

      command can be:

      new:          used to create a new todo
      get:          used to retrieve your todos
      complete:     used to mark a todo as complete
      delete:       used to delete a todo
      help:         used to print the usage guide
  `;
  
  console.log(usageText);
};

const errorLog = (error) => {
  const eLog = chalk.red(error);
  console.log(eLog);
};

// make sure the length of the arguments is exactly three
if (args.length > 3 && args[2] !== 'complete' && args[2] !== 'delete') {
  errorLog(`only one argument can be accepted.`);
  usage();
  return;
}


// New Command
const adapter = new FileSync('db.json');
const db = low(adapter);
db.defaults({ todos: [] }).write();

const prompt = (question) => {
  const r = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });
  return new Promise((resolve, error) => {
    r.question(question, answer => {
      r.close();
      resolve(answer);
    })
  });
};

const newTodo = () => {
  const q = chalk.blue('Type in your todo\n');
  prompt(q).then(todo => {
    // add todo into db
    db.get('todos').push({
      title: todo,
      complete: false
    }).write();
  });
};


// Get Command
const getTodos = () => {
  const todos = db.get('todos').value();
  let index = 1;
  todos.map(todo => {
    let todoText = `${index++}. ${todo.title}`;
    if (todo.complete) {
      todoText += ' ✔ ️' ;
    }
    console.log(chalk.strikethrough(todoText));
  })
  return;
};


const checkStuff = () => {
  // check that length
  if (args.length !== 4) {
    errorLog('invalid number of arguments passed for complete command');
    return;
  }

  let n = Number(args[3]);
  // check if the value is a number
  if (isNaN(n)) {
    errorLog("please provide a valid number for complete command");
    return;
  }

  // check if correct length of values has been passed
  let todosLength = db.get('todos').value().length;
  if (n > todosLength) {
    errorLog("invalid number passed for complete command.")
    return;
  }
  return n;
}


// Complete Command
const completeTodo = () => {
  const n = checkStuff();
  db.set(`todos[${n - 1}].complete`, true).write();
};


// Delete Command
const deleteTodo = () => {
  const n = checkStuff();
  const todos = db.get('todos').value();
  db.get('todos').remove({ title: todos[n - 1].title }).write();
};


switch(args[2]) {
  case 'help':
    usage();
    break;
  case 'new':
    newTodo();
    break;
  case 'get':
    getTodos();
    break;
  case 'complete':
    completeTodo();
    break;
  case 'delete':
    deleteTodo();
    break;
  default:
    errorLog('invalid command passed.');
    usage();
}